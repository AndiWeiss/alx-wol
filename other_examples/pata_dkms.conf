PACKAGE_NAME="pata_acpi_test"
PACKAGE_VERSION="1.0"

BUILT_MODULE_NAME[0]="pata_acpi"
BUILT_MODULE_LOCATION[0]="."
DEST_MODULE_NAME[0]="pata_acpi"
DEST_MODULE_LOCATION[0]="/updates"

AUTOINSTALL="yes"
PRE_BUILD="scripts/fetchsources.sh"
POST_INSTALL="scripts/handleinitrd.sh \"${kernelver}\" install"
POST_REMOVE="scripts/handleinitrd.sh \"${kernelver}\" remove"

# check if module shall be installed or removed
if [ "${module}" != "" ];
then
	# it shall be installed

	# get the kernel file
	if [ -e "/boot/vmlinuz-${kernelver}" ];
	then
		# for debian based systems
		kernel="/boot/vmlinuz-${kernelver}"
	else
		# for arch linux
		kernel="/usr/lib/modules/${kernelver}/vmlinuz"
	fi

	if [ ! -e "${kernel}" ];
	then
		echo "can't find kernel file (2)" >&2
		exit
	fi

	# and the build directory
	build="${dkms_tree}/${module}/${module_version}/build"

	# use strings for scripts just to make lines shorter
	extract_kversion_string="${source_tree}/${module}-${module_version}/scripts/extract_kversion_string.sh"
	extract_kversion="${source_tree}/${module}-${module_version}/scripts/extract_kversion.sh"
	gcc_used="${source_tree}/${module}-${module_version}/scripts/gcc_used.sh"
	select_gcc="${source_tree}/${module}-${module_version}/scripts/select_gcc.sh"

	# get the path to the working directory
	temp="${dkms_tree}/${module}/${module_version}/${kernelver}"

	# check if the kernel version or the gcc information is missing
	if [ ! -f "${temp}/kernel_version" ] || [ ! -f "${temp}/gcc_used" ];
	then
		# if yes: we need the kernel version string - extract it
		"${extract_kversion_string}" "${kernel}" "${kernel_source_dir}" "${temp}" "${temp}/kernel_version_string"

		# check if the kernel version information is available
		if [ ! -f "${temp}/kernel_version" ];
		then
			# no, create it
			"${extract_kversion}" "${temp}/kernel_version_string" "${temp}/kernel_version"
		fi

		# check if the information which gcc has been used is available
		if [ ! -f "${temp}/gcc_used" ];
		then
			# no, create it
			"${gcc_used}" "${temp}/kernel_version_string" "${temp}/gcc_used"
		fi

		# now we don't need the kernel version string anymore
		# remove it
		rm "${temp}/kernel_version_string"
	fi

	if [ -f "${temp}/gcc_used" ];
	then
		# get the gcc version used
		gcc_used_version="$(cat "${temp}/gcc_used")"

		# and select the optimum compiler to compile the module
		gcc_exe="$("${select_gcc}" "${arch}" "${build}" "${gcc_used_version}")"
		if [ $? -eq 0 ];
		then
			# on success configure the make accordingly
			MAKE[0]="make -j4 KERNELRELEASE=\"${kernelver}\" -C \"$kernel_source_dir\" M=\"$dkms_tree/$module/$module_version/build\" HOSTCC=\"${gcc_exe}\" CC=\"${gcc_exe}\""
		fi
	fi
fi
